
// DP

// 状态表示： 
// f[i] 表示 i 的二进制表示中 1 的个数

// 初始化：
// f[0] = 0; // 0 的二进制表示中 1 的个数为 0

// 状态转移：
// i 的二进制表示中 1 的个数 和 i >> 1 的二进制中 1 的个数除了最后一位都一样，所以先求出 f[i >> 1]，再判断个位是 0 是 1
// f[i] = f[i >> 1] + (i & 1)

// i      = 110101101
// i >> 1 = 11010110
// i & 1  = 000000001 = 1

class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> f(n + 1);

        f[0] = 0;

        for (int i = 1; i <= n; i ++ ) {
            f[i] = f[i >> 1] + (i & 1);
        }
        
        return f;
    }
};

